# {{name}}

{{description}}

## Quick Start

To run the service locally:

```bash
npm install
npm start -- --debug
```

For automatic code reloading in development:

```bash
npm install -g nodemon
nodemon -- --debug
```

To run on __AMQP__, omit the ```--debug``` option from either command.

<sup>_Note: You will need a running [RabbitMQ and ETCD2](https://github.com/nsnsolutions/rpcfw.env) environment._</sup>

# Interface

This section outlines the details you will need to use this service.

- [Methods](#methods)
- [Representations](#representations)

## Methods
{% for method in methods %}
- [{{ method.title }} ({{ method.version.lower() }})](#{{ method.title.lower().replace(' ','-') }}-{{method.version.lower()}}) - {{ method.desc }}{% endfor %}

{% for method in methods %}
### {{method.title}} ({{method.version.lower()}})

{{method.desc}}

#### RPC Execution

- Role: {{service}}.Pub
- Cmd: {{method.name}}.{{method.version.lower()}}

```javascript
var args = { ... }
seneca.act('role:{{service}}.Pub,cmd:{{method.name}}.{{method.version.lower()}}', args, (err, dat) => {
    /* Handle result */
});
```

#### HTTP Execution

- Service Name: {{service}}
- Method Name: {{method.name}}
- Version: {{method.version.lower()}}

```
POST /amqp/exec/{{service}}/{{method.name}}?version={{method.version.lower()}} HTTP/1.1
Host: devel.rpc.velma.com
Content-Type: application/json
x-repr-format: RPC
Cache-Control: no-cache

{ ... }
```

#### Arguments

This method accepts the following arguments.

| Param     | Type   | Default | Description |
| --------- | ------ | ------- | ----------- |{% for arg in method.args %}
| {{ arg.name }} | {{ arg.type }} | {{ arg.default }} | {{ arg.desc }} |{% endfor %}

#### Returns

This method returns the following information.

- [Error Response (v1)](#error-response-v1){% for ret_index in method.returns %}
- [{{ representation[ret_index].name }} ({{ representation[ret_index].version.lower() }})](#{{ representation[ret_index].name.lower().replace(' ','-') }}-{{ representation[ret_index].version.lower() }})
{% endfor %}{% endfor %}

## Representations

All response sent by this service will differ depending on the protocal used
and the control headers set on the request. You can read more about how this
output is create in the [RPC Interface Response Model](https://github.com/nsnsolutions/RPC.Interface#response-object)
documentation.

Excluding [Error Response (v1)](#error-response-v1), this documentation will
only show the result body details.

- [Error Response (v1)](#error-response-v1){% for repr in representation %}
- [{{repr.name}} ({{ repr.version.lower() }})] (#{{ repr.name.lower().replace(' ','-') }}-{{ repr.version.lower() }}){% endfor %}

### Error Response (v1)

Represents an execution failure. Details about the failure are placed in
`message` and a numeric value is placed in `code` that is specific to the type
of error.

This response uses the standard
[rpcfw](https://github.com/nsnsolutions/rpcfw/blob/devel/README.md#errors)
error model and codes.

```json
{
    "hasError": true,
    "code": 000,
    "message": "Description of error"
}
```

For more information on workflow error codes:
[RPC-Utils.Executor](https://github.com/nsnsolutions/RPC.Utils/blob/devel/README.md#executor)

<sup>_Note: This detail level is not always returnes. Please see the [RPC Interface Response Model](https://github.com/nsnsolutions/RPC.Interface#response-object) documentation for more information._</sup>

{% for repr in representation %}
### {{repr.name}} ({{ repr.version.lower() }})

{{repr.desc}}

{% if repr.fields %}| Field | Type | Description |
| ----- | ---- | ----------- |{% for field in repr.fields %}
| {{ field.name }} | {{ field.type }} | {{ field.desc }} |{% endfor %}{% else %}_Empty Representations_{% endif %}

{% endfor %}

---

<sup>_This documentation was generated by Ian's handy template engine. If you find errors, please let hime know._</sup>
